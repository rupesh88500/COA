def to_bin(x, n):
    return format(x & ((1<<n)-1), f'0{n}b')

def non_restoring_division(Q, M, bits=8):
    A = 0
    for _ in range(bits):
        A = ((A << 1) | (Q >> (bits-1))) & ((1<<bits)-1)
        Q = (Q << 1) & ((1<<bits)-1)

        if A >= 0:
            A = A - M
            Q |= 1
        else:
            A = A + M
            Q |= 0

    # Final correction if A negative
    if A < 0:
        A += M

    print("Quotient  :", Q, "=", to_bin(Q, bits))
    print("Remainder :", A, "=", to_bin(A, bits))

# MAIN
d = int(input("Dividend: "))
s = int(input("Divisor : "))
non_restoring_division(d, s)
